import os
import json
import asyncio
from pathlib import Path
from dotenv import load_dotenv
from telethon import TelegramClient, events, errors
from telethon.tl.functions.channels import GetFullChannelRequest
from telethon.tl.functions.phone import ExportGroupCallInviteRequest
from telethon.tl.types import InputChannel, InputGroupCall
from web_export import get_private_channel_link
from utils import test_connection 
load_dotenv()
API_ID = int(os.getenv("API_ID", 0))
API_HASH = os.getenv("API_HASH", "")
PHONE = os.getenv("PHONE", "")
SESSION_NAME = os.getenv("SESSION_NAME", "voice_access_bot")
CONFIG_PATH = Path("config.json")

client = TelegramClient(SESSION_NAME, API_ID, API_HASH)

state = {}

def load_config():
    if not CONFIG_PATH.exists():
        CONFIG_PATH.write_text(json.dumps({"channels": {}, "default": None}, indent=2), encoding="utf-8")
    return json.loads(CONFIG_PATH.read_text(encoding="utf-8"))

def save_config(cfg):
    CONFIG_PATH.write_text(json.dumps(cfg, indent=2), encoding="utf-8")

async def export_link(label):
    cfg = load_config()
    chs = cfg["channels"]
    if label not in chs:
        return None, f"‚ùå –ú–µ—Ç–∫–∞ ¬´{label}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
    data = chs[label]
    peer = InputChannel(data["id"], data["hash"])
    try:
        full = await client(GetFullChannelRequest(peer))
    except errors.RPCError as e:
        return None, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {e}"
    call = getattr(full.full_chat, "call", None)
    if not call:
        return None, "‚ùå –≠—Ñ–∏—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω."
    igc = InputGroupCall(call.id, call.access_hash)
    try:
        inv = await client(ExportGroupCallInviteRequest(igc, True))
    except errors.PublicChannelMissingError:
        return None, "‚ùå –ö–∞–Ω–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É–±–ª–∏—á–Ω—ã–º."
    except errors.RPCError as e:
        return None, f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}"
    hsh = inv.link.split("=").pop()
    uname = getattr(full.chats[0], "username", None)
    if not uname:
        return None, "‚ùå –£ –∫–∞–Ω–∞–ª–∞ –Ω–µ—Ç @username."
    return f"https://t.me/{uname}?voicechat={hsh}", None

@client.on(events.NewMessage(pattern=r'^scan_connect$'))
async def on_scan_connect(ev):
    sender = await ev.get_sender()
    username = getattr(sender, "username", "")
    if username != "MrAsavik":
        return await ev.reply("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")

    await ev.reply("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram Web...")

    profile_path = "./chrome_profile"  # –ø—É—Ç—å –∫ Chrome-–ø—Ä–æ—Ñ–∏–ª—é
    is_connected = test_connection(profile_path)

    if is_connected:
        await ev.reply("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: Telegram Web —Ä–∞–±–æ—Ç–∞–µ—Ç.")
    else:
        await ev.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ Telegram Web.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∏ –≤–æ–π–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é.")


@client.on(events.NewMessage(pattern=r"^/start$"))
async def on_start(ev):
    chat = ev.chat_id
    state[chat] = {"step": "menu", "last_msg_id": ev.message.id}
    text = (
        "üõ† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*:\n"
        "0. üîÑ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "1. ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª\n"
        "2. üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤\n"
        "3. üóë –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª\n"
        "4. üéØ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n"
        "5. üîó –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É (–ø–æ default)\n"
        "6. üì© –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç –≤ default\n"
        "7. üö™ –í—ã—Ö–æ–¥\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É (0‚Äì7):"
    )
    await ev.reply(text, parse_mode="md")

@client.on(events.NewMessage(pattern=r"^[0-7]$"))
async def on_number(ev):
    chat = ev.chat_id
    msg_id = ev.message.id
    st = state.get(chat)
    if not st or st["step"] != "menu" or msg_id <= st["last_msg_id"]:
        return

    choice = int(ev.text)
    cfg = load_config()
    state[chat] = {"step": "menu", "last_msg_id": msg_id}

    if choice == 0:
        return await on_start(ev)

    if choice == 1:
        state[chat] = {"step": "add_type", "last_msg_id": msg_id}
        return await ev.reply("üîê –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞–Ω–∞–ª–∞:\n1. public (–æ—Ç–∫—Ä—ã—Ç—ã–π)\n2. private (–∑–∞–∫—Ä—ã—Ç—ã–π)", parse_mode="md")

    if choice == 2:
        chs = cfg["channels"]
        if not chs:
            await ev.reply("‚ö†Ô∏è –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤.")
        else:
            lines = "\n".join(f"- {lbl} ({chs[lbl].get('type', 'unknown')})" for lbl in chs)
            await ev.reply(f"üì¶ *–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã*:\n{lines}", parse_mode="md")
        return await on_start(ev)

    if choice == 3:
        chs = cfg["channels"]
        if not chs:
            await ev.reply("‚ö†Ô∏è –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤.")
            return await on_start(ev)
        menu = "\n".join(f"{i+1}. {lbl}" for i, lbl in enumerate(chs))
        state[chat] = {
            "step": "del_select",
            "last_msg_id": msg_id,
            "labels": list(chs.keys())  # <- –¥–æ–±–∞–≤–∏–ª
        }
        return await ev.reply(f"üóë –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (0 ‚Äî –æ—Ç–º–µ–Ω–∞):\n{menu}", parse_mode="md")

    if choice == 4:
        chs = cfg["channels"]
        if not chs:
            await ev.reply("‚ö†Ô∏è –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤.")
            return await on_start(ev)
        menu = "\n".join(f"{i+1}. {lbl}" for i,lbl in enumerate(chs))
        state[chat] = {"step": "setdef", "last_msg_id": msg_id}
        return await ev.reply(f"üéØ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä default (0 ‚Äî –æ—Ç–º–µ–Ω–∞):\n{menu}", parse_mode="md")

    if choice == 5:
        default = cfg.get("default")
        if not default:
            await ev.reply("‚ùå Default –Ω–µ –∑–∞–¥–∞–Ω. –°–Ω–∞—á–∞–ª–∞ –ø—É–Ω–∫—Ç 4.")
        else:
            data = cfg["channels"][default]
            if data.get("type") == "private":
                try:
                    link = get_private_channel_link(
                        username=data["username"],
                        profile_dir="C:/Users/you/AppData/Local/Google/Chrome/User Data"
                    )
                except Exception as e:
                    await ev.reply(f"‚ùå –û—à–∏–±–∫–∞ Web: {e}")
                else:
                    await ev.reply(f"üîó –°—Å—ã–ª–∫–∞ (private):\n{link}")
            else:
                link, err = await export_link(default)
                if err:
                    await ev.reply(err)
                else:
                    await ev.reply(f"üîó –°—Å—ã–ª–∫–∞:\n{link}")
        return await on_start(ev)

    if choice == 6:
        default = cfg.get("default")
        if not default:
            await ev.reply("‚ùå Default –Ω–µ –∑–∞–¥–∞–Ω.")
        else:
            link, err = await export_link(default)
            if err:
                await ev.reply(err)
            else:
                post = f"üéô –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å:\n{link}"
                data = cfg["channels"][default]
                peer = InputChannel(data["id"], data["hash"])
                await client.send_message(peer, post)
                await ev.reply("üì© –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.")
        return await on_start(ev)

    if choice == 7:
        state.pop(chat, None)
        return await ev.reply("üëã –î–æ –≤—Å—Ç—Ä–µ—á–∏! –î–ª—è –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é ‚Äî /start")
@client.on(events.NewMessage)
async def on_text(ev):
    chat = ev.chat_id
    msg_id = ev.message.id
    st = state.get(chat)
    if not st or msg_id <= st["last_msg_id"]:
        return

    cfg = load_config()
    txt = ev.text.strip()

    # –û—Ç–º–µ–Ω–∞
    if txt == "0" and st["step"] in ("add_type", "add_public", "add_private", "add_private_choice", "del_select", "setdef"):
        return await on_start(ev)
#–£–¥–∞–ª–µ–Ω–∏–µ 
    if st["step"] == "del_select":
        labels = st.get("labels", [])
        if not txt.isdigit():
            return await ev.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (0 ‚Äî –æ—Ç–º–µ–Ω–∞)")
        idx = int(txt)
        if idx == 0:
            return await on_start(ev)
        if not (1 <= idx <= len(labels)):
            return await ev.reply(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä (1‚Äì{len(labels)})")
        removed = labels[idx - 1]
        cfg["channels"].pop(removed)
        save_config(cfg)
        await ev.reply(f"üóë –ö–∞–Ω–∞–ª ¬´{removed}¬ª —É–¥–∞–ª—ë–Ω")
        return await on_start(ev)

     # –®–∞–≥: –≤—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø –∫–∞–Ω–∞–ª–∞
    if st["step"] == "add_type":
        if txt == "1":
            state[chat] = {"step": "add_public", "last_msg_id": msg_id}
            return await ev.reply("–í–≤–µ–¥–∏—Ç–µ: `username –º–µ—Ç–∫–∞` (–ø—Ä–∏–º–µ—Ä: @mychan label1)\n0 ‚Äî –æ—Ç–º–µ–Ω–∞", parse_mode="md")
        elif txt == "2":
            state[chat] = {"step": "add_private", "last_msg_id": msg_id}
            return await ev.reply("–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞\n0 ‚Äî –æ—Ç–º–µ–Ω–∞")
        else:
            return await ev.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 1 (public) –∏–ª–∏ 2 (private)\n0 ‚Äî –æ—Ç–º–µ–Ω–∞")

    # –®–∞–≥: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ public
    if st["step"] == "add_public":
        parts = txt.split()
        if len(parts) != 2:
            return await ev.reply("‚ùå –§–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–µ–Ω! –í–≤–µ–¥–∏—Ç–µ: `username –º–µ—Ç–∫–∞`")
        user, label = parts
        try:
            ent = await client.get_entity(user)
        except Exception as e:
            return await ev.reply(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω @{user}: {e}")
        cfg["channels"][label] = {
            "id": ent.id, "hash": ent.access_hash, "type": "public", "username": user.lstrip("@")
        }
        save_config(cfg)
        await ev.reply(f"‚úÖ Public-–∫–∞–Ω–∞–ª @{user} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ ¬´{label}¬ª")
        return await on_start(ev)

    # –®–∞–≥: –ø–æ–∏—Å–∫ private
    if st["step"] == "add_private":
        dialogs = await client.get_dialogs()
        candidates = [d for d in dialogs if d.is_channel and txt.lower() in (d.name or "").lower()]
        if not candidates:
            return await ev.reply("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ —ç—Ç–æ–º—É –∑–∞–ø—Ä–æ—Å—É.")
        if len(candidates) == 1:
            d = candidates[0]
            ent = d.entity
            label = d.name
            cfg["channels"][label] = {
                "id": ent.id, "hash": ent.access_hash, "type": "private", "username": None
            }
            save_config(cfg)
            await ev.reply(f"‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª ¬´{label}¬ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
            return await on_start(ev)

        # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ ‚Äì –≤—ã–±–∏—Ä–∞–µ–º
        lines = "\n".join(f"{i+1}. {d.name}" for i, d in enumerate(candidates))
        state[chat] = {"step": "add_private_choice", "last_msg_id": msg_id, "list": candidates}
        return await ev.reply(f"üîç –ù–∞–π–¥–µ–Ω–æ:\n{lines}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (0 ‚Äî –æ—Ç–º–µ–Ω–∞)")

    # –®–∞–≥: –≤—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ private
    if st["step"] == "add_private_choice":
        lst = st.get("list", [])
        if not txt.isdigit():
            return await ev.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (0 ‚Äî –æ—Ç–º–µ–Ω–∞)")
        idx = int(txt)
        if idx == 0:
            return await on_start(ev)
        if not (1 <= idx <= len(lst)):
            return await ev.reply(f"‚ùå –ù–æ–º–µ—Ä –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (1‚Äì{len(lst)})")
        d = lst[idx - 1]
        ent = d.entity
        label = d.name
        cfg["channels"][label] = {
            "id": ent.id, "hash": ent.access_hash, "type": "private", "username": None
        }
        save_config(cfg)
        await ev.reply(f"‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª ¬´{label}¬ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
        return await on_start(ev)

    if st["step"] == "setdef":
        labels = list(cfg["channels"].keys())
        if not txt.isdigit():
            return await ev.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É!\n0 ‚Äî –æ—Ç–º–µ–Ω–∞")
        idx = int(txt)
        if not (1 <= idx <= len(labels)):
            return await ev.reply(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä (1‚Äì{len(labels)})")
        cfg["default"] = labels[idx-1]
        save_config(cfg)
        await ev.reply(f"üéØ Default —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ¬´{cfg['default']}¬ª")
        return await on_start(ev)

async def main():
    await client.start(phone=PHONE)
    print("ü§ñ UserBot –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é /start ‚Ä¶")
    await client.run_until_disconnected()

if __name__ == "__main__":
    asyncio.run(main())
