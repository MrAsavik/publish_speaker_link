import os
import json
import asyncio
import logging
from datetime import datetime, timedelta
from pathlib import Path
from dotenv import load_dotenv
from telethon import TelegramClient, errors
from telethon.tl.functions.channels import GetFullChannelRequest
from telethon.tl.functions.phone import ExportGroupCallInviteRequest
from telethon.tl.types import InputChannel, InputGroupCall

# ‚îÄ‚îÄ‚îÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")
logger = logging.getLogger(__name__)

# ‚îÄ‚îÄ‚îÄ –ó–∞–≥—Ä—É–∑–∫–∞ .env ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()
API_ID       = os.getenv("API_ID")
API_HASH     = os.getenv("API_HASH")
PHONE        = os.getenv("PHONE")
SESSION_NAME = os.getenv("SESSION_NAME", "voice_access_bot")

if not all([API_ID, API_HASH, PHONE]):
    logger.error("–ù–µ–ø–æ–ª–Ω—ã–µ –∫—Ä–µ–¥—ã: –∑–∞–¥–∞–π—Ç–µ API_ID, API_HASH –∏ PHONE –≤ .env")
    exit(1)

client = TelegramClient(SESSION_NAME, int(API_ID), API_HASH)
CONFIG_PATH = Path("config.json")
DRAFT_PATH  = Path("draft_post.txt")

def load_config():
    # –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ config.json
    if not CONFIG_PATH.exists() or not CONFIG_PATH.read_text().strip():
        CONFIG_PATH.write_text(json.dumps({"channels": {}}, indent=2), encoding="utf-8")
    try:
        cfg = json.loads(CONFIG_PATH.read_text(encoding="utf-8"))
        return cfg.get("channels", {})
    except json.JSONDecodeError:
        logger.warning("config.json –ø–æ–≤—Ä–µ–∂–¥—ë–Ω ‚Äî –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—é.")
        CONFIG_PATH.write_text(json.dumps({"channels": {}}, indent=2), encoding="utf-8")
        return {}

async def main():
    await client.start(PHONE)

    # 1) –í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞
    channels = load_config()
    if not channels:
        logger.error("–ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –≤ config.json ‚Äî —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ setup_config.py")
        return

    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:")
    keys = list(channels.keys())
    for i, name in enumerate(keys, 1):
        print(f" {i}. {name}")
    idx = int(input("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –Ω–æ–º–µ—Ä–æ–º: ").strip()) - 1
    name = keys[idx]
    data = channels[name]
    channel = InputChannel(data["id"], data["hash"])

    # 2) –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —ç—Ñ–∏—Ä–∞
    try:
        full = await client(GetFullChannelRequest(channel))
    except errors.RPCError as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: %s", e)
        return

    call = getattr(full.full_chat, "call", None)
    if not call:
        logger.info("–≠—Ñ–∏—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ.")
        return

    logger.info("–≠—Ñ–∏—Ä: id=%s, access_hash=%s", call.id, call.access_hash)

    # 3) –≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏–∫–µ—Ä-—Å—Å—ã–ª–∫–∏
    igc = InputGroupCall(call.id, call.access_hash)
    try:
        invite = await client(ExportGroupCallInviteRequest(igc, True))
    except errors.PublicChannelMissingError:
        logger.error("–ö–∞–Ω–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É–±–ª–∏—á–Ω—ã–º –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Å—ã–ª–∫–∏.")
        return
    except errors.RPCError as e:
        logger.error("RPC-–æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: %s", e)
        return

    hsh = invite.link.split("=").pop()
    username = getattr(full.chats[0], "username", None)
    if not username:
        logger.error("–£ –∫–∞–Ω–∞–ª–∞ –Ω–µ—Ç @username ‚Äî —Å–¥–µ–ª–∞–π—Ç–µ –∫–∞–Ω–∞–ª –ø—É–±–ª–∏—á–Ω—ã–º.")
        return

    # 4) –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–≤—É—Ö —Ä–∞–±–æ—á–∏—Ö —Å—Å—ã–ª–æ–∫
    https_link = f"https://t.me/{username}?voicechat={hsh}"
    tg_link    = f"tg://resolve?domain={username}&livestream={hsh}"
    print("\nüîπ –°—Å—ã–ª–∫–∏:")
    print(" 1) HTTPS-voicechat:", https_link)
    print(" 2) TG-livestream: ", tg_link)

    # 5) –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —à–∞–±–ª–æ–Ω–∞ –ø–æ—Å—Ç–∞ –∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∞
    post_template = (
        "üéô **–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ —ç—Ñ–∏—Ä—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!**\n\n"
        f"‚Ä¢ –í–µ–± (–≥–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç):\n{https_link}\n\n"
        f"‚Ä¢ –ú–æ–±–∏–ª—å–Ω—ã–π (livestream):\n{tg_link}\n\n"
        "‚Äî –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."
    )
    DRAFT_PATH.write_text(post_template, encoding="utf-8")
    logger.info("–ß–µ—Ä–Ω–æ–≤–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ %s", DRAFT_PATH)

    # 6) –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    if input("–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ 1 —á–∞—Å? (y/N): ").strip().lower() == 'y':
        send_time = datetime.utcnow() + timedelta(hours=1)
        await client.send_message(
            entity=channel,
            message=post_template,
            schedule=send_time    # ‚Üê –∏—Å–ø–æ–ª—å–∑—É–µ–º `schedule`, –∞ –Ω–µ `schedule_date`
        )
        logger.info("–ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ %s UTC", send_time.strftime("%Y-%m-%d %H:%M"))

    await client.disconnect()

if __name__ == "__main__":
    asyncio.run(main())
