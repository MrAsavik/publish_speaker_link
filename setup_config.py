import os
import json
import asyncio
from pathlib import Path
from dotenv import load_dotenv
from telethon import TelegramClient
from telethon.tl.types import InputPeerChannel

# üì• –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()
api_id       = int(os.getenv("API_ID"))
api_hash     = os.getenv("API_HASH")
phone        = os.getenv("PHONE")
session_name = os.getenv("SESSION_NAME", "voice_access_bot")

client = TelegramClient(session_name, api_id, api_hash)
config_path = Path('config.json')

async def main():
    await client.start(phone)

    config_path = Path('config.json')

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥–∞
    if config_path.exists() and config_path.read_text().strip():
        config = json.loads(config_path.read_text())
        if "channels" not in config:
            config["channels"] = {}
    else:
        config = {"channels": {}}
        config_path.write_text(json.dumps(config, indent=2), encoding='utf-8')
    print("–ü–æ–∏—Å–∫–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–∞–Ω–∞–ª–∞:")
    query = input("–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞ (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ): ").strip().lower()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∫–∞–Ω–∞–ª—ã
    dialogs = await client.get_dialogs()
    channels = [d.entity for d in dialogs if getattr(d.entity, 'broadcast', False)]
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ query
    filtered = []
    for chan in channels:
        title = getattr(chan, 'title', '') or ''
        if not query or query in title.lower():
            filtered.append(chan)

    if not filtered:
        print("‚ö†Ô∏è –ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")
        return

    # –í—ã–≤–æ–¥–∏–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    print("–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:")
    for idx, chan in enumerate(filtered, start=1):
        title = getattr(chan, 'title', '') or "<–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è>"
        print(f" {idx}. {title} (id={chan.id})")

    choice = int(input("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞–Ω–∞–ª–∞: ").strip())
    chan = filtered[choice - 1]
    channel_name = input("–í–≤–µ–¥–∏—Ç–µ –º–µ—Ç–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –≤ config: ").strip()

    channel_id = chan.id
    channel_hash = chan.access_hash

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ config.json (–±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ —ç—Ñ–∏—Äy)
    config['channels'][channel_name] = {
        'id': channel_id,
        'hash': channel_hash
    }
    config_path.write_text(json.dumps(config, indent=2), encoding='utf-8')
    print(f"‚úî –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞ '{channel_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ config.json.")

    await client.disconnect()

if __name__ == '__main__':
    asyncio.run(main())
